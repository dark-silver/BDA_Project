#PSIS-LOO for hierarchical model
hier_loo <- rstan::loo(fit_hierarchical)
hier_elpd <- hier_loo$estimates[1,1]
# Effective number of parameters:
hier_p <- hier_loo$estimates[2,1]
hier_elpd
plot(hier_loo)
loo_table <- rbind(c(hier_elpd, sep_elpd), c(hier_p, sep_p))
colnames(loo_table) <- c('Hierarchical', 'Separate')
rownames(loo_table) <- c('elpd', 'p_eff')
kable(loo_table, caption='LOO-CV results')
# This chunk sets echo = TRUE as default, that is print all code.
# knitr::opts_chunk$set can be used to set other notebook generation options, too.
# include=FALSE inside curly brackets makes this block not be included in the pdf.
knitr::opts_chunk$set(echo = TRUE)
#install.packages("remotes")
#remotes::install_github("avehtari/BDA_course_Aalto", subdir = "rpackage",
#upgrade="never") # Introduction
#install.packages("markmyassignment")
#tinytex::install_tinytex()
#install.packages("posterior")
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# install.packages("loo")
# install.packages("bayesplot")
# install.packages("posterior")
library(markmyassignment)
library(aaltobda)
library(ggplot2)
library(reshape2)
library(rstan)
#library(cmdstanr)
rstan_options(auto_write = TRUE)
options(mc.cores = 1)
# library(loo)
library(bayesplot)
library(posterior)
assignment_path <- paste("https://github.com/avehtari/BDA_course_Aalto/,blob/master/assignments/tests/assignment5.yml", sep="")
set_assignment(assignment_path)
#Separate model Stan code
writeLines(readLines("separate_8.stan"))
#Pooled model Stan code
writeLines(readLines("pooled_8.stan"))
#Hierarchical model Stan code
writeLines(readLines("hierarchical_8.stan"))
data("factory")
stan_data <- list(
y = factory,
N = nrow(factory), J = ncol(factory)
)
fit_separate <- stan(file = "separate_8.stan", data = stan_data)
monitor(fit_separate)
data_pooled <- list(
y = unlist(factory),
N = length(unlist(factory))
)
fit_pooled <- stan(file = "pooled_8.stan", data = data_pooled)
monitor(fit_pooled)
fit_hierarchical <- stan(file = "hierarchical_8.stan", data = stan_data)
monitor(fit_hierarchical)
sep_loo <- rstan::loo(fit_separate)
#elpd value:
sep_elpd <- sep_loo$estimates[1,1]
# Effective numnber of parameters:
sep_p <- sep_loo$estimates[2,1]
sep_khat <- sep_loo$diagnostics$pareto_k
plot(sep_khat, ylim=c(0, 1), xlab="k hat", ylab="", main="k-hat values for the separate model")
abline(h=0.7)
sep_elpd
sep_p
pool_loo <- rstan::loo(fit_pooled)
#elpd value:
pool_elpd <- pool_loo$estimates[1,1]
# Effective numnber of parameters:
pool_p <- pool_loo$estimates[2,1]
pool_khat <- pool_loo$diagnostics$pareto_k
plot(pool_khat, ylim=c(0, 1), xlab="k hat", ylab="", main="k-hat values for the pooled model")
abline(h=0.7)
pool_elpd
pool_p
plot(x=all_data[['year']], y=all_data[['Material combusted']], type='l')
#PSIS-LOO for separate model
sep_loo <- rstan::loo(fit_separate)
sep_elpd <- sep_loo$estimates[1,1]
# Effective number of parameters:
sep_p <- sep_loo$estimates[2,1]
plot(sep_loo)
#PSIS-LOO for hierarchical model
hier_loo <- rstan::loo(fit_hierarchical)
hier_elpd <- hier_loo$estimates[1,1]
# Effective number of parameters:
hier_p <- hier_loo$estimates[2,1]
hier_elpd
plot(hier_loo)
#PSIS-LOO for hierarchical model
hier_loo <- rstan::loo(fit_hierarchical)
hier_elpd <- hier_loo$estimates[1,1]
# Effective number of parameters:
hier_p <- hier_loo$estimates[2,1]
plot(hier_loo)
loo_table <- rbind(c(hier_elpd, sep_elpd), c(hier_p, sep_p))
colnames(loo_table) <- c('Hierarchical', 'Separate')
rownames(loo_table) <- c('elpd', 'p_eff')
kable(loo_table, caption='LOO-CV results')
# Prepare data
data_hierarchical = list(
N = nrow(all_data[7:15,]),
J = ncol(all_data[,2:4]),
x = all_data[7:15,'year'],
y = all_data[7:15, 2:4],
xpred = 2019,
sd_mean = hierarchical_sd_mean,
slope_mean = hierarchical_slope_mean,
intercept_mean = hierarchical_intercept_mean
)
data_separate = list(
N = nrow(all_data[7:15,]),
J = ncol(all_data[,2:4]),
x = all_data[7:15,'year'],
y = all_data[7:15, 2:4],
xpred = 2019,
alpha_mean = alpha_mean,
beta_mean = beta_mean
)
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical)
fit_separate <- stan(file = "Separate_project.stan", data = data_separate)
monitor(fit_hierarchical)
monitor(fit_separate)
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical)
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical)
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical)
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical)
?stan
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, iter=4000) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, iter=4000, warmup=3000) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, iter=6000, warmup=5000) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, adapt_delta=0.95) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, control=list(adapt_delta=0.95)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, control=list(adapt_delta=0.97)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, iter=4000, warmup=3000, control=list(adapt_delta=0.95)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, iter=6000, warmup=5000, control=list(adapt_delta=0.95)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, iter=8000, warmup=7000, control=list(adapt_delta=0.95)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, control=list(adapt_delta=0.95)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, control=list(adapt_delta=0.98)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, iter=4000, warmup=3000, control=list(adapt_delta=0.98)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, iter=4000, warmup=3000, control=list(adapt_delta=0.95)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, iter=8000, warmup=7000, control=list(adapt_delta=0.95)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, iter=8000, warmup=7000, control=list(adapt_delta=0.95)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, iter=8000, warmup=7000, control=list(adapt_delta=0.98)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, control=list(adapt_delta=0.98)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, control=list(adapt_delta=0.95)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, control=list(adapt_delta=0.95)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, control=list(adapt_delta=0.95)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, control=list(adapt_delta=0.95)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical, control=list(adapt_delta=0.95)) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical) #Had to remove the sigma prior bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical) #Had to remove the sigma prior and modify the sd priors bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical) #Had to remove the sigma prior and modify the sd priors bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical) #Had to remove the sigma prior and modify the sd priors bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical) #Had to remove the sigma prior and modify the sd priors bc it wasn't converging
fit_separate <- stan(file = "Separate_project.stan", data = data_separate)
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical) #Had to remove the sigma prior and modify the sd priors bc it wasn't converging
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical) #Had to remove the sigma prior and modify the sd priors bc it wasn't converging
rhat_matr = matrix(data=NA, nrow=6, ncol=2)
colnames(rhat_matr) = c('Hierarchical', 'Separate')
rownames(rhat_matr) = c('alpha[1]', 'beta[1]', 'alpha[2]', 'beta[2]', 'alpha[3]', 'beta[3]')
for (i in 1:3) {
alpha <- paste('alpha[', as.character(i), ']', sep="")
beta <- paste('beta[', as.character(i), ']', sep="")
rhat_alpha <- posterior::rhat(extract_variable_matrix(fit_hierarchical, alpha))
rhat_beta <- posterior::rhat(extract_variable_matrix(fit_hierarchical, beta))
rhat_matr[i+(i-1), 1] <- rhat_alpha
rhat_matr[i+(i-1)+1, 1] <- rhat_beta
}
for (i in 1:3) {
alpha <- paste('alpha[', as.character(i), ']', sep="")
beta <- paste('beta[', as.character(i), ']', sep="")
rhat_alpha <- posterior::rhat(extract_variable_matrix(fit_separate, alpha))
rhat_beta <- posterior::rhat(extract_variable_matrix(fit_separate, beta))
rhat_matr[i+(i-1), 2] <- rhat_alpha
rhat_matr[i+(i-1)+1, 2] <- rhat_beta
}
kable(rhat_matr, caption='Rhat values')
#PSIS-LOO for separate model
sep_loo <- rstan::loo(fit_separate)
sep_elpd <- sep_loo$estimates[1,1]
# Effective number of parameters:
sep_p <- sep_loo$estimates[2,1]
plot(sep_loo)
#PSIS-LOO for hierarchical model
hier_loo <- rstan::loo(fit_hierarchical)
hier_elpd <- hier_loo$estimates[1,1]
# Effective number of parameters:
hier_p <- hier_loo$estimates[2,1]
plot(hier_loo)
loo_table <- rbind(c(hier_elpd, sep_elpd), c(hier_p, sep_p))
colnames(loo_table) <- c('Hierarchical', 'Separate')
rownames(loo_table) <- c('elpd', 'p_eff')
kable(loo_table, caption='LOO-CV results')
?ess_bulk
?ess_bulk
sep_matr = matrix(data=NA, nrow=6, ncol=2)
colnames(sep_matr) = c('Rhat', 'bulk-ESS', 'tail-ESS')
sep_matr = matrix(data=NA, nrow=6, ncol=3)
colnames(sep_matr) = c('Rhat', 'bulk-ESS', 'tail-ESS')
rownames(sep_matr) = c('alpha[1]', 'beta[1]', 'alpha[2]', 'beta[2]', 'alpha[3]', 'beta[3]')
for (i in 1:3) {
alpha <- paste('alpha[', as.character(i), ']', sep="")
alpha_mat <- extract_variable_matrix(fit_separate, alpha)
beta_mat <- extract_variable_matrix(fit_separate, beta)
beta <- paste('beta[', as.character(i), ']', sep="")
rhat_alpha <- posterior::rhat(alpha_mat)
rhat_beta <- posterior::rhat(beta_mat)
b_ess_alpha <- posterior::ess_bulk(alpha_mat)
b_ess_beta <- posterior::ess_bulk(beta_mat)
t_ess_alpha <- posterior::ess_tail(alpha_mat)
t_ess_beta <- posterior::ess_tail(beta_mat)
sep_matr[i+(i-1), 1] <- rhat_alpha
sep_matr[i+(i-1)+1, 1] <- rhat_beta
sep_matr[i+(i-1), 2] <- b_ess_alpha
sep_matr[i+(i-1)+1, 2] <- b_ess_beta
sep_matr[i+(i-1), 3] <- b_tail_alpha
sep_matr[i+(i-1)+1, 3] <- b_tail_beta
}
sep_matr = matrix(data=NA, nrow=6, ncol=3)
colnames(sep_matr) = c('Rhat', 'bulk-ESS', 'tail-ESS')
rownames(sep_matr) = c('alpha[1]', 'beta[1]', 'alpha[2]', 'beta[2]', 'alpha[3]', 'beta[3]')
for (i in 1:3) {
alpha <- paste('alpha[', as.character(i), ']', sep="")
alpha_mat <- extract_variable_matrix(fit_separate, alpha)
beta_mat <- extract_variable_matrix(fit_separate, beta)
beta <- paste('beta[', as.character(i), ']', sep="")
rhat_alpha <- posterior::rhat(alpha_mat)
rhat_beta <- posterior::rhat(beta_mat)
b_ess_alpha <- posterior::ess_bulk(alpha_mat)
b_ess_beta <- posterior::ess_bulk(beta_mat)
t_ess_alpha <- posterior::ess_tail(alpha_mat)
t_ess_beta <- posterior::ess_tail(beta_mat)
sep_matr[i+(i-1), 1] <- rhat_alpha
sep_matr[i+(i-1)+1, 1] <- rhat_beta
sep_matr[i+(i-1), 2] <- b_ess_alpha
sep_matr[i+(i-1)+1, 2] <- b_ess_beta
sep_matr[i+(i-1), 3] <- t_ess_alpha
sep_matr[i+(i-1)+1, 3] <- t_ess_beta
}
kable(rhat_matr, caption='Separate model')
sep_matr = matrix(data=NA, nrow=6, ncol=3)
colnames(sep_matr) = c('Rhat', 'bulk-ESS', 'tail-ESS')
rownames(sep_matr) = c('alpha[1]', 'beta[1]', 'alpha[2]', 'beta[2]', 'alpha[3]', 'beta[3]')
for (i in 1:3) {
alpha <- paste('alpha[', as.character(i), ']', sep="")
alpha_mat <- extract_variable_matrix(fit_separate, alpha)
beta_mat <- extract_variable_matrix(fit_separate, beta)
beta <- paste('beta[', as.character(i), ']', sep="")
rhat_alpha <- posterior::rhat(alpha_mat)
rhat_beta <- posterior::rhat(beta_mat)
b_ess_alpha <- posterior::ess_bulk(alpha_mat)
b_ess_beta <- posterior::ess_bulk(beta_mat)
t_ess_alpha <- posterior::ess_tail(alpha_mat)
t_ess_beta <- posterior::ess_tail(beta_mat)
sep_matr[i+(i-1), 1] <- rhat_alpha
sep_matr[i+(i-1)+1, 1] <- rhat_beta
sep_matr[i+(i-1), 2] <- b_ess_alpha
sep_matr[i+(i-1)+1, 2] <- b_ess_beta
sep_matr[i+(i-1), 3] <- t_ess_alpha
sep_matr[i+(i-1)+1, 3] <- t_ess_beta
}
kable(rhat_matr, caption='Separate model')
sep_matr = matrix(data=NA, nrow=6, ncol=3)
colnames(sep_matr) = c('Rhat', 'bulk-ESS', 'tail-ESS')
rownames(sep_matr) = c('alpha[1]', 'beta[1]', 'alpha[2]', 'beta[2]', 'alpha[3]', 'beta[3]')
for (i in 1:3) {
alpha <- paste('alpha[', as.character(i), ']', sep="")
alpha_mat <- extract_variable_matrix(fit_separate, alpha)
beta_mat <- extract_variable_matrix(fit_separate, beta)
beta <- paste('beta[', as.character(i), ']', sep="")
rhat_alpha <- posterior::rhat(alpha_mat)
rhat_beta <- posterior::rhat(beta_mat)
b_ess_alpha <- posterior::ess_bulk(alpha_mat)
b_ess_beta <- posterior::ess_bulk(beta_mat)
t_ess_alpha <- posterior::ess_tail(alpha_mat)
t_ess_beta <- posterior::ess_tail(beta_mat)
sep_matr[i+(i-1), 1] <- rhat_alpha
sep_matr[i+(i-1)+1, 1] <- rhat_beta
sep_matr[i+(i-1), 2] <- b_ess_alpha
sep_matr[i+(i-1)+1, 2] <- b_ess_beta
sep_matr[i+(i-1), 3] <- t_ess_alpha
sep_matr[i+(i-1)+1, 3] <- t_ess_beta
}
kable(sep_matr, caption='Separate model')
hier_matr = matrix(data=NA, nrow=6, ncol=3)
colnames(hier_matr) = c('Rhat', 'bulk-ESS', 'tail-ESS')
rownames(hier_matr) = c('alpha[1]', 'beta[1]', 'alpha[2]', 'beta[2]', 'alpha[3]', 'beta[3]')
for (i in 1:3) {
alpha <- paste('alpha[', as.character(i), ']', sep="")
beta <- paste('beta[', as.character(i), ']', sep="")
alpha_mat <- extract_variable_matrix(fit_hierarchical, alpha)
beta_mat <- extract_variable_matrix(fit_hierarchical, beta)
rhat_alpha <- posterior::rhat(alpha_mat)
rhat_beta <- posterior::rhat(beta_mat)
b_ess_alpha <- posterior::ess_bulk(alpha_mat)
b_ess_beta <- posterior::ess_bulk(beta_mat)
t_ess_alpha <- posterior::ess_tail(alpha_mat)
t_ess_beta <- posterior::ess_tail(beta_mat)
hier_matr[i+(i-1), 1] <- rhat_alpha
hier_matr[i+(i-1)+1, 1] <- rhat_beta
hier_matr[i+(i-1), 2] <- b_ess_alpha
hier_matr[i+(i-1)+1, 2] <- b_ess_beta
hier_matr[i+(i-1), 3] <- t_ess_alpha
hier_matr[i+(i-1)+1, 3] <- t_ess_beta
}
kable(hier_matr, caption='Hierarchical model')
# Materials combusted 2019 prediction
ypred_c <- as.matrix(fit_separate, pars = "ypred_c")
ypred_r <- as.matrix(fit_separate, pars = "ypred_r")
ypred_l <- as.matrix(fit_separate, pars = "ypred_l")
# Materials combusted 2019 prediction
yrep_c <- as.matrix(fit_separate, pars = "yrep_c")
# This chunk sets echo = TRUE as default, that is print all code.
# knitr::opts_chunk$set can be used to set other notebook generation options, too.
# include=FALSE inside curly brackets makes this block not be included in the pdf.
knitr::opts_chunk$set(echo = TRUE)
#install.packages("readxl")
#nstall.packages("DescTools")
library(readxl)
library(tidyr)
library(DescTools)
library(plyr)
library(ggplot2)
library(reshape2)
library(rstan)
#library(cmdstanr)
rstan_options(auto_write = TRUE)
options(mc.cores = 1)
# library(loo)
library(bayesplot)
library(posterior)
library(knitr)
setwd("/Users/vilmatiainen/Documents/Aalto bsc/Year 3/BDA/BDA_project")
multiplesheets <- function(fname) {
# getting info about all excel sheets
sheets <- readxl::excel_sheets(fname)
tibble <- lapply(sheets, function(x) readxl::read_excel(fname, sheet = x))
data_frame <- lapply(tibble, as.data.frame)
# assigning names to data frames
names(data_frame) <- sheets
init_df <<- data_frame
}
# specifying the path name
path <- "/Users/vilmatiainen/Documents/Aalto bsc/Year 3/BDA/BDA_project/Materials_Municipal_Waste_Stream_1960_2018.xlsx"
multiplesheets(path)
# Dataframe for storing the textile data
all_data <- data.frame(matrix(ncol = 0, nrow = 15))
# Add the data to the dataframe
for (name in names(init_df)) {
df <- init_df[name][[1]]
no_na <- drop_na(df)
row_df <- data.frame(no_na[,-1], row.names=no_na[,1])
new_df <- row_df[grep("Textiles", rownames(row_df)), ]
t_df <- t(new_df)
if (ncol(t_df) > 0) {
colnames(t_df) <- c(name)
all_data <<- cbind(all_data, t_df)
}
}
# Clean up row names
rownames(all_data) <-gsub("X","",as.character(rownames(all_data)))
all_data['year'] <- as.numeric(as.character(rownames(all_data)))
all_data['Materials recycled-%'] <- (all_data['Materials recycled']/all_data['Materials generated'])*100
all_data['Material combusted-%'] <- (all_data['Material combusted']/all_data['Materials generated'])*100
all_data['Materials landfilled-%'] <- (all_data['Materials landfilled']/all_data['Materials generated'])*100
rownames(all_data) <- NULL
plot(x=all_data[['year']], y=all_data[['Material combusted']], type='l')
# Separate model:
#Estimate intercept means:
recycled_intercept <- 680000*0.001 #US population in year 0  times 1kg (0.001 tonnes) for clothing waste in a yera per person
combusted_intercept <- 0
landfilled_intercept <- 0
alpha_mean = c(recycled_intercept, combusted_intercept, landfilled_intercept)
#Estimate slope means:
summary_2 <- summary(lm(`Materials recycled` ~ year, data=all_data[(1:6),]))
recycled_slope <- summary_2$coefficients[2,1]
summary_3 <- summary(lm(`Material combusted` ~ year, data=all_data[(1:6),]))
combusted_slope <- summary_3$coefficients[2,1]
summary_4 <- summary(lm(`Materials landfilled` ~ year, data=all_data[(1:6),]))
landfilled_slope <- summary_4$coefficients[2,1]
beta_mean = c(recycled_slope, combusted_slope, landfilled_slope)
# Hierarchical model:
hierarchical_intercept_mean <- mean(alpha_mean)
hierarchical_slope_mean <- mean(beta_mean)
hierarchical_sd_mean <- (sd(all_data[1:6,'Materials recycled']) + sd(all_data[1:6,'Material combusted']) + sd(all_data[1:6,'Materials landfilled']))/3
# Prepare data
data_hierarchical = list(
N = nrow(all_data[7:15,]),
J = ncol(all_data[,2:4]),
x = all_data[7:15,'year'],
y = all_data[7:15, 2:4],
xpred = 2019,
sd_mean = hierarchical_sd_mean,
slope_mean = hierarchical_slope_mean,
intercept_mean = hierarchical_intercept_mean
)
data_separate = list(
N = nrow(all_data[7:15,]),
J = ncol(all_data[,2:4]),
x = all_data[7:15,'year'],
y = all_data[7:15, 2:4],
xpred = 2019,
alpha_mean = alpha_mean,
beta_mean = beta_mean
)
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical) #Had to remove the sigma prior and modify the sd priors bc it wasn't converging
fit_separate <- stan(file = "Separate_project.stan", data = data_separate)
monitor(fit_hierarchical)
monitor(fit_separate)
hier_matr = matrix(data=NA, nrow=6, ncol=3)
colnames(hier_matr) = c('Rhat', 'bulk-ESS', 'tail-ESS')
rownames(hier_matr) = c('alpha[1]', 'beta[1]', 'alpha[2]', 'beta[2]', 'alpha[3]', 'beta[3]')
for (i in 1:3) {
alpha <- paste('alpha[', as.character(i), ']', sep="")
beta <- paste('beta[', as.character(i), ']', sep="")
alpha_mat <- extract_variable_matrix(fit_hierarchical, alpha)
beta_mat <- extract_variable_matrix(fit_hierarchical, beta)
rhat_alpha <- posterior::rhat(alpha_mat)
rhat_beta <- posterior::rhat(beta_mat)
b_ess_alpha <- posterior::ess_bulk(alpha_mat)
b_ess_beta <- posterior::ess_bulk(beta_mat)
t_ess_alpha <- posterior::ess_tail(alpha_mat)
t_ess_beta <- posterior::ess_tail(beta_mat)
hier_matr[i+(i-1), 1] <- rhat_alpha
hier_matr[i+(i-1)+1, 1] <- rhat_beta
hier_matr[i+(i-1), 2] <- b_ess_alpha
hier_matr[i+(i-1)+1, 2] <- b_ess_beta
hier_matr[i+(i-1), 3] <- t_ess_alpha
hier_matr[i+(i-1)+1, 3] <- t_ess_beta
}
kable(hier_matr, caption='Hierarchical model')
sep_matr = matrix(data=NA, nrow=6, ncol=3)
colnames(sep_matr) = c('Rhat', 'bulk-ESS', 'tail-ESS')
rownames(sep_matr) = c('alpha[1]', 'beta[1]', 'alpha[2]', 'beta[2]', 'alpha[3]', 'beta[3]')
for (i in 1:3) {
alpha <- paste('alpha[', as.character(i), ']', sep="")
beta <- paste('beta[', as.character(i), ']', sep="")
alpha_mat <- extract_variable_matrix(fit_separate, alpha)
beta_mat <- extract_variable_matrix(fit_separate, beta)
rhat_alpha <- posterior::rhat(alpha_mat)
rhat_beta <- posterior::rhat(beta_mat)
b_ess_alpha <- posterior::ess_bulk(alpha_mat)
b_ess_beta <- posterior::ess_bulk(beta_mat)
t_ess_alpha <- posterior::ess_tail(alpha_mat)
t_ess_beta <- posterior::ess_tail(beta_mat)
sep_matr[i+(i-1), 1] <- rhat_alpha
sep_matr[i+(i-1)+1, 1] <- rhat_beta
sep_matr[i+(i-1), 2] <- b_ess_alpha
sep_matr[i+(i-1)+1, 2] <- b_ess_beta
sep_matr[i+(i-1), 3] <- t_ess_alpha
sep_matr[i+(i-1)+1, 3] <- t_ess_beta
}
kable(sep_matr, caption='Separate model')
# Materials combusted 2019 prediction
yrep_c <- as.matrix(fit_separate, pars = "yrep_c")
View(yrep_c)
# Materials combusted 2019 prediction
yrep_c <- as.matrix(fit_separate, pars = "yrep_c")
ypred_r <- as.matrix(fit_separate, pars = "yrep_r")
ypred_l <- as.matrix(fit_separate, pars = "yrep_l")
all_data['Materials combusted']
all_data['Material combusted']
?ppc_dens_overlay_grouped
plot(fit_hierarchical)
# Materials combusted 2019 prediction
yrep_c <- as.matrix(fit_separate, pars = "yrep_c")
ypred_r <- as.matrix(fit_separate, pars = "yrep_r")
ypred_l <- as.matrix(fit_separate, pars = "yrep_l")
y_c <- all_data['Material combusted']
ppc_dens_overlay(y_c, yrep = yrep_c[1:100,])
?ppc_dens_overlay
all_data[['Material combusted']]
# Materials combusted 2019 prediction
yrep_c <- as.matrix(fit_separate, pars = "yrep_c")
ypred_r <- as.matrix(fit_separate, pars = "yrep_r")
ypred_l <- as.matrix(fit_separate, pars = "yrep_l")
y_c <- all_data[['Material combusted']]
ppc_dens_overlay(y_c, yrep = yrep_c[1:100,])
y_c[7:15]
# Materials combusted 2019 prediction
yrep_c <- as.matrix(fit_separate, pars = "yrep_c")
ypred_r <- as.matrix(fit_separate, pars = "yrep_r")
ypred_l <- as.matrix(fit_separate, pars = "yrep_l")
y_c <- all_data[['Material combusted']]
ppc_dens_overlay(y_c[7:15], yrep = yrep_c[1:100,])
ppc_dens_overlay(y_c[7:15], yrep = yrep_c[1:1000,])
ppc_dens_overlay(y_c[7:15], yrep = yrep_c[1:500,])
ppc_dens_overlay(y_c[7:15], yrep = yrep_c[1:200,])
ppc_dens_overlay(y_c[7:15], yrep = yrep_c[1:100,])
# Materials combusted 2019 prediction
yrep_c <- as.matrix(fit_separate, pars = "yrep_c")
ypred_r <- as.matrix(fit_separate, pars = "yrep_r")
ypred_l <- as.matrix(fit_separate, pars = "yrep_l")
y_c <- all_data[['Material combusted']]
ppc_dens_overlay(y_c[7:15], yrep = yrep_c[1:100,])
ppc_dens_overlay(y_c[7:15], yrep = yrep_c[1:50,])
# Materials combusted 2019 prediction
yrep_c <- as.matrix(fit_separate, pars = "yrep_c")
ypred_r <- as.matrix(fit_separate, pars = "yrep_r")
ypred_l <- as.matrix(fit_separate, pars = "yrep_l")
y_c <- all_data[['Material combusted']]
ppc_dens_overlay(y_c[7:15], yrep = yrep_c[1:100,])
ppc_dens_overlay(y_c[7:15], yrep = yrep_c[1:100,])
