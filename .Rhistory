plot_grid(p_dens, p_hist)
# Materials combusted 2019 prediction
s_yrep_c <- as.matrix(fit_separate, pars = "yrep_c")
s_yrep_r <- as.matrix(fit_separate, pars = "yrep_r")
s_yrep_l <- as.matrix(fit_separate, pars = "yrep_l")
h_yrep_c <- as.matrix(fit_hierarchical, pars = "yrep_c")
h_yrep_r <- as.matrix(fit_hierarchical, pars = "yrep_r")
h_yrep_l <- as.matrix(fit_hierarchical, pars = "yrep_l")
y_c <- all_data[['Material combusted']]
y_r <- all_data[['Materials recycled']]
y_l <- all_data[['Materials landfilled']]
p_dens <- ppc_dens_overlay(y_c[7:15], yrep = s_yrep_c[1:50,])
p_hist <- ppc_hist(y_c[7:15], yrep = s_yrep_c[1:8,])
plot_grid(p_dens, p_hist)
# Materials combusted 2019 prediction
s_yrep_c <- as.matrix(fit_separate, pars = "yrep_c")
s_yrep_r <- as.matrix(fit_separate, pars = "yrep_r")
s_yrep_l <- as.matrix(fit_separate, pars = "yrep_l")
h_yrep_c <- as.matrix(fit_hierarchical, pars = "yrep_c")
h_yrep_r <- as.matrix(fit_hierarchical, pars = "yrep_r")
h_yrep_l <- as.matrix(fit_hierarchical, pars = "yrep_l")
y_c <- all_data[['Material combusted']]
y_r <- all_data[['Materials recycled']]
y_l <- all_data[['Materials landfilled']]
p_dens <- ppc_dens_overlay(y_c[7:15], yrep = s_yrep_c[1:50,])
p_hist <- ppc_hist(y_c[7:15], yrep = s_yrep_c[1:8,])
plot_grid(p_dens, p_hist)
# This chunk sets echo = TRUE as default, that is print all code.
# knitr::opts_chunk$set can be used to set other notebook generation options, too.
# include=FALSE inside curly brackets makes this block not be included in the pdf.
knitr::opts_chunk$set(echo = TRUE)
#install.packages("readxl")
#nstall.packages("DescTools")
library(readxl)
library(tidyr)
#library(DescTools)
library(plyr)
library(ggplot2)
library(reshape2)
library(rstan)
#library(cmdstanr)
rstan_options(auto_write = TRUE)
options(mc.cores = 1)
# library(loo)
library(bayesplot)
library(posterior)
library(knitr)
#install.packages('cowplot')
library(cowplot)
setwd(getwd())
multiplesheets <- function(fname) {
# getting info about all excel sheets
sheets <- readxl::excel_sheets(fname)
tibble <- lapply(sheets, function(x) readxl::read_excel(fname, sheet = x))
data_frame <- lapply(tibble, as.data.frame)
# assigning names to data frames
names(data_frame) <- sheets
init_df <<- data_frame
}
# specifying the path name
path <- paste(getwd(), "/Materials_Municipal_Waste_Stream_1960_2018.xlsx", sep="")
multiplesheets(path)
# Dataframe for storing the textile data
all_data <- data.frame(matrix(ncol = 0, nrow = 15))
# Add the data to the dataframe
for (name in names(init_df)) {
df <- init_df[name][[1]]
no_na <- drop_na(df)
row_df <- data.frame(no_na[,-1], row.names=no_na[,1])
new_df <- row_df[grep("Textiles", rownames(row_df)), ]
t_df <- t(new_df)
if (ncol(t_df) > 0) {
colnames(t_df) <- c(name)
all_data <<- cbind(all_data, t_df)
}
}
# Clean up row names
rownames(all_data) <-gsub("X","",as.character(rownames(all_data)))
all_data['year'] <- as.numeric(as.character(rownames(all_data)))
rownames(all_data) <- NULL
plot_his_frame <- all_data[1:6,]
plot_frame <- all_data[7:15,]
#Adjust 1950 to be year 0:
all_data['original year'] <- all_data['year']
all_data['year'] <- all_data['year']-1950
kable(all_data, caption='Final dataframe')
par(mfrow=c(1,3))
plot(x=plot_his_frame[['year']], y=plot_his_frame[['Materials recycled']], type='l', xlab='year', ylab='Materials recycled (tons)')
plot(x=plot_his_frame[['year']], y=plot_his_frame[['Material combusted']], type='l', xlab='year', ylab='Materials combusted (tons)')
plot(x=plot_his_frame[['year']], y=plot_his_frame[['Materials landfilled']], type='l', xlab='year', ylab='Materials landfilled (tons)')
par(mfrow=c(1,3))
plot(x=plot_frame[['year']], y=plot_frame[['Materials recycled']], type='l', xlab='year', ylab='Materials recycled (tons)')
plot(x=plot_frame[['year']], y=plot_frame[['Material combusted']], type='l', xlab='year', ylab='Materials combusted (tons)')
plot(x=plot_frame[['year']], y=plot_frame[['Materials landfilled']], type='l', xlab='year', ylab='Materials landfilled (tons)')
# Separate model:
# Estimate intercept means:
# recycled_intercept <- 680000*0.001 US population in year 0  times 1kg (0.001 tonnes)
# for clothing waste in a year per person
# combusted_intercept <- 0
# landfilled_intercept <- 0
#Estimate slope means:
summary_2 <- summary(lm(`Materials recycled` ~ year, data=all_data[(1:6),]))
recycled_slope <- summary_2$coefficients[2,1]
summary_3 <- summary(lm(`Material combusted` ~ year, data=all_data[(1:6),]))
combusted_slope <- summary_3$coefficients[2,1]
summary_4 <- summary(lm(`Materials landfilled` ~ year, data=all_data[(1:6),]))
landfilled_slope <- summary_4$coefficients[2,1]
beta_mean = c(recycled_slope, combusted_slope, landfilled_slope)
sd_mean = c(sd(all_data[1:6,'Materials recycled']),
sd(all_data[1:6,'Material combusted']),
sd(all_data[1:6,'Materials landfilled']))
sd_mean_old <- sd_mean
# Calculate the factor by how much the standard deviation of generated textiles
# has shrunk after between 1960-2005 and 2010-2018
factor <- sd(all_data[1:6, 'Materials generated'])/sd(all_data[7:15, 'Materials generated'])
# Divide sd's by the factor to make them more realistic
sd_mean <- sd_mean/factor
# Intercept means for 1950 0:
recycled_intercept <- max(summary_2$coefficients[1,1], 0)
combusted_intercept <- max(summary_3$coefficients[1,1], 0)
landfilled_intercept <- max(summary_4$coefficients[1,1], 0)
alpha_mean = c(recycled_intercept, combusted_intercept, landfilled_intercept)
# Hierarchical model:
hierarchical_intercept_mean <- mean(alpha_mean)
hierarchical_slope_mean <- mean(beta_mean)
hierarchical_sd_mean_old <- mean(sd_mean_old)
hierarchical_sd_mean <- mean(sd_mean)
alphas <- c()
betas <- c()
sigmas <- c()
for (i in alpha_mean) {
alphas <- append(alphas, paste('N(', round(i, digits=0), ',', 100, ')', sep=""))
}
for (i in beta_mean) {
betas <- append(betas, paste('N(', round(i, digits=0), ',', 1000, ')', sep=""))
}
for (i in sd_mean_old) {
sigmas <- append(sigmas, paste('N(', round(i, digits=0), ',', 1000, ')', sep=""))
}
s_p_init_matr = cbind(alphas, betas, sigmas)
colnames(s_p_init_matr) = c('Alpha', 'Beta', 'Sigma')
rownames(s_p_init_matr) = c('Materials recycled', 'Materials combusted', 'Materials landfilled')
kable(s_p_init_matr, caption="Separate model intial priors (values rounded to 0 digits).")
h_p_init_matr <- c(paste('N(', round(hierarchical_intercept_mean, digits=0), ',', 10, ')', sep=""),
paste('N(', 300, ',', 100, ')', sep=""),
paste('N(', round(hierarchical_slope_mean, digits=0), ',', 100, ')', sep=""),
paste('N(', 3000, ',', 1000, ')', sep=""),
paste('N(', round(hierarchical_sd_mean_old, digits=0), ',', 1000, ')', sep=""))
h_p_init_matr <- rbind(h_p_init_matr)
colnames(h_p_init_matr) = c('Alpha-mean', 'Alpha-sd', 'Beta-mean', 'Beta-sd', 'Sigma')
rownames(h_p_init_matr) <- c('Prior')
kable(h_p_init_matr, caption="Initial hyperpriors (and sigma prior) for the hierarchical model (values rounded to 0 digits).")
alphas <- c()
betas <- c()
sigmas <- c()
for (i in alpha_mean) {
alphas <- append(alphas, paste('N(', round(i, digits=0), ',', 1000, ')', sep=""))
}
for (i in beta_mean) {
betas <- append(betas, paste('N(', round(i, digits=0), ',', 10000, ')', sep=""))
}
for (i in sd_mean) {
sigmas <- append(sigmas, paste('N(', round(i, digits=0), ',', 1000, ')', sep=""))
}
s_p_final_matr = cbind(alphas, betas, sigmas)
colnames(s_p_final_matr) = c('Alpha', 'Beta', 'Sigma')
rownames(s_p_final_matr) = c('Materials recycled', 'Materials combusted', 'Materials landfilled')
kable(s_p_final_matr, caption="Separate model final priors (values rounded to 0 digits).")
h_p_init_matr <- c(paste('N(', round(hierarchical_intercept_mean, digits=0), ',', 100, ')', sep=""),
paste('N(', 1000, ',', 200, ')', sep=""),
paste('N(', round(hierarchical_slope_mean, digits=0), ',', 1000, ')', sep=""),
paste('N(', 10000, ',', 2000, ')', sep=""),
paste('N(', round(hierarchical_sd_mean, digits=0), ',', 100000, ')', sep=""))
h_p_final_matr <- rbind(h_p_init_matr)
colnames(h_p_final_matr) = c('Alpha-mean', 'Alpha-sd', 'Beta-mean', 'Beta-sd', 'Sigma')
rownames(h_p_final_matr) <- c('Prior')
kable(h_p_final_matr, caption="Final hyperpriors (and sigma prior) for the hierarchical model (values rounded to 0 digits).")
writeLines(readLines("Separate_project.stan"))
writeLines(readLines("Hierarchical_project.stan"))
# Prepare data
data_hierarchical = list(
N = nrow(all_data[7:15,]),
J = ncol(all_data[,2:4]),
x = all_data[7:15,'year'],
y = all_data[7:15, 2:4],
xpred = (2019-1950),
sd_mean = hierarchical_sd_mean,
slope_mean = hierarchical_slope_mean,
intercept_mean = hierarchical_intercept_mean
)
data_separate = list(
N = nrow(all_data[7:15,]),
J = ncol(all_data[,2:4]),
x = all_data[7:15,'year'],
y = all_data[7:15, 2:4],
xpred = (2019-1950),
alpha_mean = alpha_mean,
beta_mean = beta_mean,
sds = sd_mean
)
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical)
fit_separate <- stan(file = "Separate_project.stan", data = data_separate)
hier_matr = matrix(data=NA, nrow=6, ncol=3)
colnames(hier_matr) = c('Rhat', 'bulk-ESS', 'tail-ESS')
rownames(hier_matr) = c('alpha[1]', 'beta[1]', 'alpha[2]', 'beta[2]', 'alpha[3]', 'beta[3]')
for (i in 1:3) {
alpha <- paste('alpha[', as.character(i), ']', sep="")
beta <- paste('beta[', as.character(i), ']', sep="")
alpha_mat <- extract_variable_matrix(fit_hierarchical, alpha)
beta_mat <- extract_variable_matrix(fit_hierarchical, beta)
rhat_alpha <- posterior::rhat(alpha_mat)
rhat_beta <- posterior::rhat(beta_mat)
b_ess_alpha <- posterior::ess_bulk(alpha_mat)
b_ess_beta <- posterior::ess_bulk(beta_mat)
t_ess_alpha <- posterior::ess_tail(alpha_mat)
t_ess_beta <- posterior::ess_tail(beta_mat)
hier_matr[i+(i-1), 1] <- rhat_alpha
hier_matr[i+(i-1)+1, 1] <- rhat_beta
hier_matr[i+(i-1), 2] <- b_ess_alpha
hier_matr[i+(i-1)+1, 2] <- b_ess_beta
hier_matr[i+(i-1), 3] <- t_ess_alpha
hier_matr[i+(i-1)+1, 3] <- t_ess_beta
}
kable(hier_matr, caption='Hierarchical model Rhat and ESS.')
sep_matr = matrix(data=NA, nrow=6, ncol=3)
colnames(sep_matr) = c('Rhat', 'bulk-ESS', 'tail-ESS')
rownames(sep_matr) = c('alpha[1]', 'beta[1]', 'alpha[2]', 'beta[2]', 'alpha[3]', 'beta[3]')
for (i in 1:3) {
alpha <- paste('alpha[', as.character(i), ']', sep="")
beta <- paste('beta[', as.character(i), ']', sep="")
alpha_mat <- extract_variable_matrix(fit_separate, alpha)
beta_mat <- extract_variable_matrix(fit_separate, beta)
rhat_alpha <- posterior::rhat(alpha_mat)
rhat_beta <- posterior::rhat(beta_mat)
b_ess_alpha <- posterior::ess_bulk(alpha_mat)
b_ess_beta <- posterior::ess_bulk(beta_mat)
t_ess_alpha <- posterior::ess_tail(alpha_mat)
t_ess_beta <- posterior::ess_tail(beta_mat)
sep_matr[i+(i-1), 1] <- rhat_alpha
sep_matr[i+(i-1)+1, 1] <- rhat_beta
sep_matr[i+(i-1), 2] <- b_ess_alpha
sep_matr[i+(i-1)+1, 2] <- b_ess_beta
sep_matr[i+(i-1), 3] <- t_ess_alpha
sep_matr[i+(i-1)+1, 3] <- t_ess_beta
}
kable(sep_matr, caption='Separate model Rhat and ESS.')
check_hmc_diagnostics(fit_hierarchical)
check_hmc_diagnostics(fit_separate)
# Materials combusted 2019 prediction
s_yrep_c <- as.matrix(fit_separate, pars = "yrep_c")
s_yrep_r <- as.matrix(fit_separate, pars = "yrep_r")
s_yrep_l <- as.matrix(fit_separate, pars = "yrep_l")
h_yrep_c <- as.matrix(fit_hierarchical, pars = "yrep_c")
h_yrep_r <- as.matrix(fit_hierarchical, pars = "yrep_r")
h_yrep_l <- as.matrix(fit_hierarchical, pars = "yrep_l")
y_c <- all_data[['Material combusted']]
y_r <- all_data[['Materials recycled']]
y_l <- all_data[['Materials landfilled']]
p_dens <- ppc_dens_overlay(y_c[7:15], yrep = s_yrep_c[1:50,])
p_hist <- ppc_hist(y_c[7:15], yrep = s_yrep_c[1:8,])
plot_grid(p_dens, p_hist)
# Materials combusted 2019 prediction
s_yrep_c <- as.matrix(fit_separate, pars = "yrep_c")
s_yrep_r <- as.matrix(fit_separate, pars = "yrep_r")
s_yrep_l <- as.matrix(fit_separate, pars = "yrep_l")
h_yrep_c <- as.matrix(fit_hierarchical, pars = "yrep_c")
h_yrep_r <- as.matrix(fit_hierarchical, pars = "yrep_r")
h_yrep_l <- as.matrix(fit_hierarchical, pars = "yrep_l")
y_c <- all_data[['Material combusted']]
y_r <- all_data[['Materials recycled']]
y_l <- all_data[['Materials landfilled']]
p_dens <- ppc_dens_overlay(y_c[7:15], yrep = s_yrep_c[1:50,])
p_hist <- ppc_hist(y_c[7:15], yrep = s_yrep_c[1:8,])
plot_grid(p_dens, p_hist)
# This chunk sets echo = TRUE as default, that is print all code.
# knitr::opts_chunk$set can be used to set other notebook generation options, too.
# include=FALSE inside curly brackets makes this block not be included in the pdf.
knitr::opts_chunk$set(echo = TRUE)
#install.packages("readxl")
#nstall.packages("DescTools")
library(readxl)
library(tidyr)
#library(DescTools)
library(plyr)
library(ggplot2)
library(reshape2)
library(rstan)
#library(cmdstanr)
rstan_options(auto_write = TRUE)
options(mc.cores = 1)
# library(loo)
library(bayesplot)
library(posterior)
library(knitr)
#install.packages('cowplot')
library(cowplot)
setwd(getwd())
multiplesheets <- function(fname) {
# getting info about all excel sheets
sheets <- readxl::excel_sheets(fname)
tibble <- lapply(sheets, function(x) readxl::read_excel(fname, sheet = x))
data_frame <- lapply(tibble, as.data.frame)
# assigning names to data frames
names(data_frame) <- sheets
init_df <<- data_frame
}
# specifying the path name
path <- paste(getwd(), "/Materials_Municipal_Waste_Stream_1960_2018.xlsx", sep="")
multiplesheets(path)
# Dataframe for storing the textile data
all_data <- data.frame(matrix(ncol = 0, nrow = 15))
# Add the data to the dataframe
for (name in names(init_df)) {
df <- init_df[name][[1]]
no_na <- drop_na(df)
row_df <- data.frame(no_na[,-1], row.names=no_na[,1])
new_df <- row_df[grep("Textiles", rownames(row_df)), ]
t_df <- t(new_df)
if (ncol(t_df) > 0) {
colnames(t_df) <- c(name)
all_data <<- cbind(all_data, t_df)
}
}
# Clean up row names
rownames(all_data) <-gsub("X","",as.character(rownames(all_data)))
all_data['year'] <- as.numeric(as.character(rownames(all_data)))
rownames(all_data) <- NULL
plot_his_frame <- all_data[1:6,]
plot_frame <- all_data[7:15,]
#Adjust 1950 to be year 0:
all_data['original year'] <- all_data['year']
all_data['year'] <- all_data['year']-1950
kable(all_data, caption='Final dataframe')
par(mfrow=c(1,3))
plot(x=plot_his_frame[['year']], y=plot_his_frame[['Materials recycled']], type='l', xlab='year', ylab='Materials recycled (tons)')
plot(x=plot_his_frame[['year']], y=plot_his_frame[['Material combusted']], type='l', xlab='year', ylab='Materials combusted (tons)')
plot(x=plot_his_frame[['year']], y=plot_his_frame[['Materials landfilled']], type='l', xlab='year', ylab='Materials landfilled (tons)')
par(mfrow=c(1,3))
plot(x=plot_frame[['year']], y=plot_frame[['Materials recycled']], type='l', xlab='year', ylab='Materials recycled (tons)')
plot(x=plot_frame[['year']], y=plot_frame[['Material combusted']], type='l', xlab='year', ylab='Materials combusted (tons)')
plot(x=plot_frame[['year']], y=plot_frame[['Materials landfilled']], type='l', xlab='year', ylab='Materials landfilled (tons)')
# Separate model:
# Estimate intercept means:
# recycled_intercept <- 680000*0.001 US population in year 0  times 1kg (0.001 tonnes)
# for clothing waste in a year per person
# combusted_intercept <- 0
# landfilled_intercept <- 0
#Estimate slope means:
summary_2 <- summary(lm(`Materials recycled` ~ year, data=all_data[(1:6),]))
recycled_slope <- summary_2$coefficients[2,1]
summary_3 <- summary(lm(`Material combusted` ~ year, data=all_data[(1:6),]))
combusted_slope <- summary_3$coefficients[2,1]
summary_4 <- summary(lm(`Materials landfilled` ~ year, data=all_data[(1:6),]))
landfilled_slope <- summary_4$coefficients[2,1]
beta_mean = c(recycled_slope, combusted_slope, landfilled_slope)
sd_mean = c(sd(all_data[1:6,'Materials recycled']),
sd(all_data[1:6,'Material combusted']),
sd(all_data[1:6,'Materials landfilled']))
sd_mean_old <- sd_mean
# Calculate the factor by how much the standard deviation of generated textiles
# has shrunk after between 1960-2005 and 2010-2018
factor <- sd(all_data[1:6, 'Materials generated'])/sd(all_data[7:15, 'Materials generated'])
# Divide sd's by the factor to make them more realistic
sd_mean <- sd_mean/factor
# Intercept means for 1950 0:
recycled_intercept <- max(summary_2$coefficients[1,1], 0)
combusted_intercept <- max(summary_3$coefficients[1,1], 0)
landfilled_intercept <- max(summary_4$coefficients[1,1], 0)
alpha_mean = c(recycled_intercept, combusted_intercept, landfilled_intercept)
# Hierarchical model:
hierarchical_intercept_mean <- mean(alpha_mean)
hierarchical_slope_mean <- mean(beta_mean)
hierarchical_sd_mean_old <- mean(sd_mean_old)
hierarchical_sd_mean <- mean(sd_mean)
alphas <- c()
betas <- c()
sigmas <- c()
for (i in alpha_mean) {
alphas <- append(alphas, paste('N(', round(i, digits=0), ',', 100, ')', sep=""))
}
for (i in beta_mean) {
betas <- append(betas, paste('N(', round(i, digits=0), ',', 1000, ')', sep=""))
}
for (i in sd_mean_old) {
sigmas <- append(sigmas, paste('N(', round(i, digits=0), ',', 1000, ')', sep=""))
}
s_p_init_matr = cbind(alphas, betas, sigmas)
colnames(s_p_init_matr) = c('Alpha', 'Beta', 'Sigma')
rownames(s_p_init_matr) = c('Materials recycled', 'Materials combusted', 'Materials landfilled')
kable(s_p_init_matr, caption="Separate model intial priors (values rounded to 0 digits).")
h_p_init_matr <- c(paste('N(', round(hierarchical_intercept_mean, digits=0), ',', 10, ')', sep=""),
paste('N(', 300, ',', 100, ')', sep=""),
paste('N(', round(hierarchical_slope_mean, digits=0), ',', 100, ')', sep=""),
paste('N(', 3000, ',', 1000, ')', sep=""),
paste('N(', round(hierarchical_sd_mean_old, digits=0), ',', 1000, ')', sep=""))
h_p_init_matr <- rbind(h_p_init_matr)
colnames(h_p_init_matr) = c('Alpha-mean', 'Alpha-sd', 'Beta-mean', 'Beta-sd', 'Sigma')
rownames(h_p_init_matr) <- c('Prior')
kable(h_p_init_matr, caption="Initial hyperpriors (and sigma prior) for the hierarchical model (values rounded to 0 digits).")
alphas <- c()
betas <- c()
sigmas <- c()
for (i in alpha_mean) {
alphas <- append(alphas, paste('N(', round(i, digits=0), ',', 1000, ')', sep=""))
}
for (i in beta_mean) {
betas <- append(betas, paste('N(', round(i, digits=0), ',', 10000, ')', sep=""))
}
for (i in sd_mean) {
sigmas <- append(sigmas, paste('N(', round(i, digits=0), ',', 1000, ')', sep=""))
}
s_p_final_matr = cbind(alphas, betas, sigmas)
colnames(s_p_final_matr) = c('Alpha', 'Beta', 'Sigma')
rownames(s_p_final_matr) = c('Materials recycled', 'Materials combusted', 'Materials landfilled')
kable(s_p_final_matr, caption="Separate model final priors (values rounded to 0 digits).")
h_p_init_matr <- c(paste('N(', round(hierarchical_intercept_mean, digits=0), ',', 100, ')', sep=""),
paste('N(', 1000, ',', 200, ')', sep=""),
paste('N(', round(hierarchical_slope_mean, digits=0), ',', 1000, ')', sep=""),
paste('N(', 10000, ',', 2000, ')', sep=""),
paste('N(', round(hierarchical_sd_mean, digits=0), ',', 100000, ')', sep=""))
h_p_final_matr <- rbind(h_p_init_matr)
colnames(h_p_final_matr) = c('Alpha-mean', 'Alpha-sd', 'Beta-mean', 'Beta-sd', 'Sigma')
rownames(h_p_final_matr) <- c('Prior')
kable(h_p_final_matr, caption="Final hyperpriors (and sigma prior) for the hierarchical model (values rounded to 0 digits).")
writeLines(readLines("Separate_project.stan"))
writeLines(readLines("Hierarchical_project.stan"))
# Prepare data
data_hierarchical = list(
N = nrow(all_data[7:15,]),
J = ncol(all_data[,2:4]),
x = all_data[7:15,'year'],
y = all_data[7:15, 2:4],
xpred = (2019-1950),
sd_mean = hierarchical_sd_mean,
slope_mean = hierarchical_slope_mean,
intercept_mean = hierarchical_intercept_mean
)
data_separate = list(
N = nrow(all_data[7:15,]),
J = ncol(all_data[,2:4]),
x = all_data[7:15,'year'],
y = all_data[7:15, 2:4],
xpred = (2019-1950),
alpha_mean = alpha_mean,
beta_mean = beta_mean,
sds = sd_mean
)
fit_hierarchical <- stan(file = "Hierarchical_project.stan", data = data_hierarchical)
fit_separate <- stan(file = "Separate_project.stan", data = data_separate)
hier_matr = matrix(data=NA, nrow=6, ncol=3)
colnames(hier_matr) = c('Rhat', 'bulk-ESS', 'tail-ESS')
rownames(hier_matr) = c('alpha[1]', 'beta[1]', 'alpha[2]', 'beta[2]', 'alpha[3]', 'beta[3]')
for (i in 1:3) {
alpha <- paste('alpha[', as.character(i), ']', sep="")
beta <- paste('beta[', as.character(i), ']', sep="")
alpha_mat <- extract_variable_matrix(fit_hierarchical, alpha)
beta_mat <- extract_variable_matrix(fit_hierarchical, beta)
rhat_alpha <- posterior::rhat(alpha_mat)
rhat_beta <- posterior::rhat(beta_mat)
b_ess_alpha <- posterior::ess_bulk(alpha_mat)
b_ess_beta <- posterior::ess_bulk(beta_mat)
t_ess_alpha <- posterior::ess_tail(alpha_mat)
t_ess_beta <- posterior::ess_tail(beta_mat)
hier_matr[i+(i-1), 1] <- rhat_alpha
hier_matr[i+(i-1)+1, 1] <- rhat_beta
hier_matr[i+(i-1), 2] <- b_ess_alpha
hier_matr[i+(i-1)+1, 2] <- b_ess_beta
hier_matr[i+(i-1), 3] <- t_ess_alpha
hier_matr[i+(i-1)+1, 3] <- t_ess_beta
}
kable(hier_matr, caption='Hierarchical model Rhat and ESS.')
sep_matr = matrix(data=NA, nrow=6, ncol=3)
colnames(sep_matr) = c('Rhat', 'bulk-ESS', 'tail-ESS')
rownames(sep_matr) = c('alpha[1]', 'beta[1]', 'alpha[2]', 'beta[2]', 'alpha[3]', 'beta[3]')
for (i in 1:3) {
alpha <- paste('alpha[', as.character(i), ']', sep="")
beta <- paste('beta[', as.character(i), ']', sep="")
alpha_mat <- extract_variable_matrix(fit_separate, alpha)
beta_mat <- extract_variable_matrix(fit_separate, beta)
rhat_alpha <- posterior::rhat(alpha_mat)
rhat_beta <- posterior::rhat(beta_mat)
b_ess_alpha <- posterior::ess_bulk(alpha_mat)
b_ess_beta <- posterior::ess_bulk(beta_mat)
t_ess_alpha <- posterior::ess_tail(alpha_mat)
t_ess_beta <- posterior::ess_tail(beta_mat)
sep_matr[i+(i-1), 1] <- rhat_alpha
sep_matr[i+(i-1)+1, 1] <- rhat_beta
sep_matr[i+(i-1), 2] <- b_ess_alpha
sep_matr[i+(i-1)+1, 2] <- b_ess_beta
sep_matr[i+(i-1), 3] <- t_ess_alpha
sep_matr[i+(i-1)+1, 3] <- t_ess_beta
}
kable(sep_matr, caption='Separate model Rhat and ESS.')
check_hmc_diagnostics(fit_hierarchical)
check_hmc_diagnostics(fit_separate)
# Materials combusted 2019 prediction
s_yrep_c <- as.matrix(fit_separate, pars = "yrep_c")
s_yrep_r <- as.matrix(fit_separate, pars = "yrep_r")
s_yrep_l <- as.matrix(fit_separate, pars = "yrep_l")
h_yrep_c <- as.matrix(fit_hierarchical, pars = "yrep_c")
h_yrep_r <- as.matrix(fit_hierarchical, pars = "yrep_r")
h_yrep_l <- as.matrix(fit_hierarchical, pars = "yrep_l")
y_c <- all_data[['Material combusted']]
y_r <- all_data[['Materials recycled']]
y_l <- all_data[['Materials landfilled']]
p_dens <- ppc_dens_overlay(y_c[7:15], yrep = s_yrep_c[1:50,])
p_hist <- ppc_hist(y_c[7:15], yrep = s_yrep_c[1:8,]) +
theme(axis.text.x = element_text(angle = -45, vjust = 0.5, hjust=0))
plot_grid(p_dens, p_hist)
p_dens <- ppc_dens_overlay(y_r[7:15], yrep = s_yrep_r[1:50,])
p_hist <- ppc_hist(y_r[7:15], yrep = s_yrep_r[1:8,])
plot_grid(p_dens, p_hist)
